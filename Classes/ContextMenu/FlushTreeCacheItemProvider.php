<?php
namespace W3code\W3cTreecacheflush\ContextMenu;

use TYPO3\CMS\Backend\ContextMenu\ItemProviders\AbstractProvider;

class FlushTreeCacheItemProvider extends AbstractProvider
{
    protected $itemsConfiguration = [
        'flushTreeCache' => [
            'type' => 'item',
            'label' => 'Flush cache recursively',
            'iconIdentifier' => 'actions-system-cache-clear',
            'callbackAction' => 'flushTreeCache',
            // Optionnel : ajouter un groupe (ex. 'more') ou autre metadata
        ],
    ];

    public function canHandle(): bool
    {
        return $this->table === 'pages';
    }

    public function getPriority(): int
    {
        return 55;
    }

    protected function getAdditionalAttributes(string $itemName): array
    {
        return [
            'data-callback-module' => '@w3code/w3c_treecacheflush/context-menu-actions',
            'data-uid' => $this->context
            // Here you can also add any other useful "data-" attribute you'd like to use in your JavaScript (e.g. localized messages)
        ];
    }

     /**
     * This method adds custom item to list of items generated by item providers with higher priority value (PageProvider)
     * You could also modify existing items here.
     * The new item is added after the 'root_clearCache' item.
     *
     * @param array $items
     * @return array
     */
    public function addItems(array $items): array
    {
        $this->initDisabledItems();
        // renders an item based on the configuration from $this->itemsConfiguration
        $localItems = $this->prepareItems($this->itemsConfiguration);
        
        if (isset($items['root_clearCache'])) {
            //finds a position of the item after which 'hello' item should be added
            $position = array_search('root_clearCache', array_keys($items), true);

            //slices array into two parts
            $beginning = array_slice($items, 0, $position+1, true);
            $end = array_slice($items, $position, null, true);

            // adds custom item in the correct position
            $items = $beginning + $localItems + $end;
        } else {
            $items = $items + $localItems;
        }
        //passes array of items to the next item provider
        return $items;
    }

    /**
     * This method is called for each item this provider adds and checks if given item can be added
     *
     * @param string $itemName
     * @param string $type
     * @return bool
     */
    protected function canRender(string $itemName, string $type): bool
    {
        // checking if item is disabled through TSConfig
        if (in_array($itemName, $this->disabledItems, true)) {
            return false;
        }
        $canRender = false;
        switch ($itemName) {
            case 'flushTreeCache':
                $canRender = $this->canFlushTreeCache();
                break;
        }
        return $canRender;
    }

    /**
     * Helper method implementing e.g. access check for certain item
     *
     * @return bool
     */
    protected function canFlushTreeCache(): bool
    {
        //usually here you can find more sophisticated condition. See e.g. PageProvider::canBeEdited()
        return true;
    }

}
